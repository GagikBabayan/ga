#include <iostream>
#include <stack>
#include <queue>
using namespace std;

struct Node
{
    Node *left;
    Node *right;
    int data;
    Node() : left(nullptr), right(nullptr) {}

    Node(int date) : left(nullptr), right(nullptr), data(data) {}
};

class Tree
{
public:
    Node *root;

    Tree(int data)
    {
        root = new Node(data);
    }
    Tree()
    {
        root = new Node();
    }
};

void Add(int data, Node *tree)
{
    if (!tree)
    {
        tree = new Node(data);
    }
    else
    {
        if (tree->data > data)
        {
            Add(data, tree->left);
        }
        else
        {
            Add(data, tree->right);
        }
    }
}
/*
Tree *Create(int data)
{
    Tree *newTree = new Tree;
    if (!newTree)
    {
        return nullptr;
    }
    newTree->_data = data;
    newTree->left = newTree->right = nullptr;

    return newTree;
}

Tree *Insert(Tree *root, int data)
{
    if (root == nullptr)
    {
        root = Create(data);
        return root;
    }

    queue<Tree *> q;
    q.push(root);
    while (!q.empty())
    {
        Tree *temp = q.front();
        q.pop();
        if (temp->left != nullptr)
        {
            q.push(temp->left);
        }
        else
        {
            temp->left = Create(data);
            return root;
        }
        if (temp->right != nullptr)
        {
            q.push(temp->right);
        }
        else
        {
            temp->right = Create(data);
            return root;
        }
    }

    return root;
}
*/
void Print(Node *temp)
{
    if (temp)
    {
        Print(temp->left);
        cout << temp->data << " ";
        Print(temp->right);
    }
}

bool is_Empty(Node *tree)
{
    return tree == nullptr;
}

void Stack(Tree *root)
{
    int min = root->_data;
    int sum = 0;

    if (root == nullptr)
    {
        return;
    }

    stack<Tree *> temp;
    temp.push(root);

    while (!temp.empty())
    {
        Tree *tree = temp.top();
        if (min >= tree->_data)
        {
            min = tree->_data;
        }
        sum += tree->_data;
        temp.pop();

        if (tree->left != nullptr)
        {
            temp.push(tree->left);
        }
        if (tree->right != nullptr)
        {
            temp.push(tree->right);
        }
    }
    cout << endl;
    cout << "Min = " << min << endl;
    cout << "Sum = " << sum << endl;
}

bool Search(Tree *root, int data)
{

    if (root == nullptr)
    {
        return 0;
    }

    stack<Tree *> temp;
    temp.push(root);

    while (!temp.empty())
    {
        Tree *tree = temp.top();

        if (data > tree->_data)
        {

            temp.pop();
            if (tree->right != nullptr)
            {
                temp.push(tree->right);
            }
        }
        else if (data < tree->_data)
        {
            temp.pop();
            if (tree->left != nullptr)
            {
                temp.push(tree->left);
            }
        }
        else if (data == tree->_data)
        {
            return true;
        }
    }

    return false;
}

int main()
{

    Tree *root = new Tree(10);

    Add(15, root);
    Add(16, root);
    Add(14, root);

    Print(root);
    cout << endl;
    Stack(root);
    cout << endl;

    Add(12, root);

    Print(root);
    cout << endl;
    Stack(root);
    cout << endl;

    Add(13, root);

    Print(root);
    cout << endl;
    Stack(root);
    cout << endl;

    cout << Search(root, 15);

    return 0;
}