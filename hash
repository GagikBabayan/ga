#ifndef __HASHTABLE_H__
#define __HASHTABLE_H__

#include <iostream>
#include <list>
#include <string>
using namespace std;

template <class T>
class Hash
{
private:
  int BUCKET;
  int value;
  list<T> *table;

public:
  Hash(int);
  Hash();
  int hashFunction(int);
  int hash_function(string, int);

  void insertItem(string, int);
  void displayHash();
  // void deleteItem(T);
};

template <class T>
Hash<T>::Hash()
{
  BUCKET = 0;
}

template <class T>
Hash<T>::Hash(int b)
{
  this->BUCKET = b;
  table = new list<string>[BUCKET];
}

template <class T>
int Hash<T>::hashFunction(int x)
{
  return (x % BUCKET);
}

template <class T>
void Hash<T>::insertItem(string key, int value)
{
  int index = hash_function(key, value);
  table[index].push_back(key);
}

template <class T>
int Hash<T>::hash_function(string str, int CAPACITY)
{
  int i = 0;
  for (int j = 0; str[j]; j++)
  {
    i += str[j];
    cout << i << " ";
  }
  return i % CAPACITY;
}
/*
template <class T>
void Hash<T>::deleteItem(T key)
{

  int index = hash_function(key);

  list<int>::iterator i;
  for (i = table[index].begin();
       i != table[index].end(); i++)
  {
    if (*i == key)
      break;
  }

  if (i != table[index].end())
    table[index].erase(i);
}*/

template <class T>
void Hash<T>::displayHash()
{
  for (int i = 0; i < BUCKET; i++)
  {
    cout << i;
    for (auto x : table[i])
      cout << " --> " << x;
    cout << endl;
  }
}

#endif
